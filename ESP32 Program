#include <Wire.h>
#include "RTClib.h"
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
RTC_DS3231 rtc;
const int localTimeOffsetHours=5;
const int localTimeOffsetMinutes=30;
const int buzzerPin=12;
const int buzzerDuration=10000;
const char* ssid="KISHANTH_wifi";
const char* password="kish@123";
const String thingSpeakChannelID="2617139";
const String apiKey="6BOLVUK2AJA0DEMK";
bool lastBuzzed[24][60]={false};
void setup() {
    Serial.begin(115200);
    if(!rtc.begin()) {
        while(1);
    }
    if(rtc.lostPower()) {
        rtc.adjust(DateTime(F(__DATE__),F(__TIME__)));
    }
    pinMode(buzzerPin,OUTPUT);
    digitalWrite(buzzerPin,LOW);
    WiFi.begin(ssid,password);
    while(WiFi.status()!=WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("WiFi connected.");
}
void loop() {
    DateTime now=rtc.now();
    int localHour=now.hour()+localTimeOffsetHours;
    int localMinute=now.minute()+localTimeOffsetMinutes;
    if(localMinute>=60) {
        localMinute-=60;
        localHour+=1;
    }
    if(localHour>=24) {
        localHour-=24;
    } else if(localHour<0) {
        localHour+=24;
    }
    checkThingSpeakAndBuzz(localHour,localMinute);
    delay(1000);
}
void checkThingSpeakAndBuzz(int hour,int minute) {
    if(WiFi.status()==WL_CONNECTED) {
        HTTPClient http;
        String url="https://api.thingspeak.com/channels/"+thingSpeakChannelID+"/fields/1/last.json?api_key="+apiKey; 
        http.begin(url); 
        http.setTimeout(10000);
        int httpCode=http.GET(); 
        if(httpCode>0) { 
            String payload=http.getString(); 
            DynamicJsonDocument doc(1024); 
            DeserializationError error=deserializeJson(doc,payload); 
            if(!error) { 
                String fieldValue=doc["field1"]; 
                int numberOfValues=doc["field2"];
                int startIndex=0;
                int endIndex=fieldValue.indexOf(',');
                while(endIndex!=-1) {
                    String timeValue=fieldValue.substring(startIndex,endIndex);
                    processTimeValue(timeValue,hour,minute);
                    startIndex=endIndex+1;
                    endIndex=fieldValue.indexOf(',',startIndex);
                }
                processTimeValue(fieldValue.substring(startIndex),hour,minute);
            }
        }
        http.end(); 
    }
}
void processTimeValue(String timeValue,int hour,int minute) {
    int buzzHour=timeValue.substring(0,timeValue.indexOf('.')).toInt();
    int buzzMinute=timeValue.substring(timeValue.indexOf('.')+1).toInt();
    if((hour==buzzHour&&minute==buzzMinute)&&!lastBuzzed[buzzHour][buzzMinute]) {
        digitalWrite(buzzerPin,HIGH);
        delay(buzzerDuration);
        digitalWrite(buzzerPin,LOW);
        lastBuzzed[buzzHour][buzzMinute]=true;  
    } else if(hour!=buzzHour||minute!=buzzMinute) {
        lastBuzzed[buzzHour][buzzMinute]=false; 
    }
}
